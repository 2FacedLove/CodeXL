# -*- Python -*-

Import('*')
from CXL_init import *

libName = "CXLPowerProfiling"

env = CXL_env.Clone()

#need to add to compiler flags c++11
compiler_add_base_flags = " -DBOOST_REGEX_NO_EXTERNAL_TEMPLATES"
    
env.Append(CPPFLAGS = compiler_add_base_flags)

UseQt4(env)
UseTinyXml(env)
UseQCustomPlot(env)

env.Append( CPPPATH = [ 
    ".",
    "../",
    "./Include",
	env['CXL_commonproj_dir'],
	env['CXL_common_dir'] +"/../CodeXL/Components/PowerProfiling/",
	env['CXL_common_dir'] +"/../CodeXL/Components/PowerProfiling/AMDTPowerProfiling/Include/",
	env['CXL_common_dir'] +"/../CodeXL/Components/PowerProfiling/Backend/AMDTPowerProfileAPI/inc/",
	env['CXL_common_dir'] +"/../CodeXL/Components/PowerProfiling/MiddleTier",
	env['CXL_commonproj_dir'] + '/AMDTCommonHeaders/',
	env['CXL_common_dir'] + "/Src/TSingleton",
        env['CXL_common_dir'] + '/../CodeXL/Remote',
        env['CXL_common_dir'] + '/../CodeXL',
	env['CXL_common_dir'] + '/../CodeXL/Components',
])

moc_files = Split(
    " src/ppAppController.h"
    + " src/ppCountersSelectionDialog.h"
    + " src/ppMultiLinePlot.h"
    + " src/ppMultiLinePowerStackedPlot.h"
    + " src/ppMultiLinePowerNonStackedPlot.h"
    + " src/ppProjectSettingsExtension.h"
    + " src/ppSessionNavigationChart.h"
    + " src/ppSessionView.h"
    + " src/ppSummaryView.h"
    + " src/ppTimelineView.h"
    + " Include/ppWindowsManagerHelper.h"
                )

sources = \
[
	"src/ppColors.cpp",
	"src/ppAidFunctions.cpp",
	"src/ppAppController.cpp",
	"src/ppAppWrapper.cpp",
	"src/ppCountersSelectionDialog.cpp",
	"src/ppCountersSortOrder.cpp",
	"src/ppDataUtils.cpp",
	"src/ppMDIViewCreator.cpp",
	"src/ppMenuActionsExecutor.cpp",
	"src/ppMultiLinePlot.cpp",
	"src/ppMultiLinePowerStackedPlot.cpp",
    "src/ppMultiLinePowerNonStackedPlot.cpp",
	"src/ppProjectSettingsExtension.cpp",
    "src/ppSessionController.cpp",
	"src/ppSessionNavigationChart.cpp",
    "src/ppSessionView.cpp",
    "src/ppSingletonsDelete.cpp",
    "src/ppSummaryView.cpp",
	"src/ppTimelineView.cpp",
	"src/ppTreeHandler.cpp",
    "src/ppWindowsManagerHelper.cpp",
]

commonLinkedLibraries = \
[
	"CXLBaseTools",
	"CXLOSWrappers",
	"CXLDbAdapter",
	"CXLAPIClasses",
	"CXLAnalysisBackend",
	"CXLApplicationFramework",
    "CXLProfilerDAL",
    "CXLPowerProfilingMidTier",
    "CXLPowerProfileAPI",
    "CXLApplicationComponents",
    "CXLSharedProfiling",
    "libpthread"
]

# Building moc content
MOC_Generated = []
for moc_file in moc_files:
    MOC_Generated += env.MocBld(moc_file)

# Contains all linked libraries:
linkedLibraries = commonLinkedLibraries
env.Prepend (LIBS = linkedLibraries)
	
# Creating object files	
objFiles = env.SharedObject(sources + MOC_Generated)

# Creating shared libraries
soFiles = env.SharedLibrary(
	target = libName, 
	source = objFiles)

# Installing libraries
libInstall = env.Install( 
	dir = env['CXL_lib_dir'], 
	source = (soFiles))

Return('libInstall')
