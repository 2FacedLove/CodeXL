import os

###############################################################################
# Delete a file from the VulkanServer folder
def DeleteFile(file, rootFolder):
    command = "rm -f "
    command = command + rootFolder
    command = command + "/Server/VulkanServer/"
    command = command + file
    os.system(command)

###############################################################################
# Method to clean up the temporary shared source files
def VulkanCleanup(target, source, env):
    for file in commonSources:
        DeleteFile(file, env.rootFolder)

    for file in headers:
        DeleteFile(file, env.rootFolder)
    return None

###############################################################################
# Main scons build file for VulkanServer

from CXL_init import *

Import('*')
env = CXL_env.Clone()

libName="CXLGraphicsServerVulkan"

initGPSBackend (env)
UseTinyXml (env)
UseGPUPerfAPI (env)
initVulkanSDK (env)
CopyJSON(env)

env.Append (CPPPATH =[
    env['CXL_commonproj_dir'],
    env['CXL_commonproj_dir'] + '/../../CodeXL/Components/Graphics/Server/Common',
    env['CXL_commonproj_dir'] + '/../../CodeXL/Components/Graphics/Server/Common/Linux',
    ])

GDT_LOG_MODULE="-D'LOG_MODULE=\"VulkanServer\"'"
cpp_flags= ' ' + GDT_LOG_MODULE + ' ' + ' -DVK_USE_PLATFORM_XCB_KHR -DVK_USE_PLATFORM_XLIB_KHR '
original_cpp_flag=env['CPPFLAGS']
original_cpp_flag = original_cpp_flag + cpp_flags
env.Replace(CPPFLAGS = original_cpp_flag) 

# These need to be in their dependency order, with most derived first
env['LIBS'] = \
[
    #local libraries
    "libCXLGraphicsServerCommon",
    "libCXLOSWrappers",
    "libCXLBaseTools",
    "libvulkan",
    "jpeg",
    "png",
    "z",               #used by PNG
    "libboost_system.a",
    #external libraries
    "dl",
    "rt",
    "pthread",
]

# Header files needed
headers = \
[
]

# Common source files
commonSources = \
[
]

# Vulkan specific source files
sources = \
[

# VKT sources
    "OS/Linux/VulkanServer.cpp",

    "VKT/FrameDebugger/vktFrameDebuggerLayer.cpp",

    "VKT/Interception/vktIntercept.cpp",

    "VKT/Objects/Wrappers/vktWrappedCmdBuf.cpp",
    "VKT/Objects/Wrappers/vktWrappedObject.cpp",
    "VKT/Objects/Wrappers/vktWrappedQueue.cpp",
    "VKT/Objects/vktInstanceBase.cpp",
    "VKT/Objects/vktWrappedObjectDatabase.cpp",
    "VKT/Objects/vktObjectDatabaseProcessor.cpp",

    "VKT/Profiling/vktCmdBufProfiler.cpp",
    "VKT/Profiling/vktCmdBufProfilerStatic.cpp",
    "VKT/Profiling/vktFrameProfilerLayer.cpp",
    "VKT/Profiling/vktTimestampedCmdBuf.cpp",

    "VKT/Rendering/vktImageRenderer.cpp",

    "VKT/Tracing/vktAPIEntry.cpp",
    "VKT/Tracing/vktThreadTraceData.cpp",
    "VKT/Tracing/vktTraceAnalyzerLayer.cpp",

    "VKT/Util/vktUtil.cpp",

    "VKT/vktInterceptManager.cpp",
    "VKT/vktLayerManager.cpp",
    "VKT/vktPlugin.cpp",
]

# build the VulkanServer shared library
soFiles = env.SharedLibrary(
    target = libName,
    source = sources)
install = soFiles

# Installing libraries
VulkanServer = env.Install(
    dir = env['CXL_lib_dir']+'/Plugins',
    source = (install))

# clean up the source files when everything is built
env.Command( 'done', 'libVulkanServer.so', VulkanCleanup )

Return('VulkanServer')
