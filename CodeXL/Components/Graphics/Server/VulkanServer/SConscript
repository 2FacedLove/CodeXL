import os

###############################################################################
# Delete a file from the VulkanServer folder
def DeleteFile(file, rootFolder):
    command = "rm -f "
    command = command + rootFolder
    command = command + "/Server/VulkanServer/"
    command = command + file
    os.system(command)

###############################################################################
# Main scons build file for VulkanServer

Import('GPS_env')
env = GPS_env.Clone()
env.VulkanAPIVersion = "1.0.13.0"
env['CPPPATH'] = env['GPS_PATH']
env.Prepend (CPPPATH =
[
    '../Common/Linux',
    '../../../Common/Lib/Ext/tinyxml/2.6.2',
    '../../../Common/Lib/Ext/Vulkan/' + env.VulkanAPIVersion + '/SDK/Include',
    '../../../Common/Lib/Ext/Vulkan/' + env.VulkanAPIVersion + '/SDK/Include/vulkan',
    '../../../Common/Lib/Ext/Vulkan/' + env.VulkanAPIVersion + '/SDK/Source/layers',
    '../../../Common/Lib/Ext/Vulkan/' + env.VulkanAPIVersion + '/SDK/Source/loader',
    '../../../Common/Lib/Ext/Vulkan/' + env.VulkanAPIVersion + '/SDK/glslang/SPIRV',
])
env.Prepend (LIBPATH = env['GPS_LIBPATH'])
env.Prepend(CCFLAGS =
[
    '-std=c++11',

    "-DVK_USE_PLATFORM_XCB_KHR",
    "-DVK_USE_PLATFORM_XLIB_KHR",
])

lib_env = env.Clone()

env.Prepend(CCFLAGS =
[
    '-Wall',
    '-Wextra',

    "-D'LOG_MODULE=\"VulkanServer\"'"
])

# Vulkan specific source files
lib_src = \
[
# glslang
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/glslang_tab.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/Constant.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/InfoSink.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/Initialize.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/IntermTraverse.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/Intermediate.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/ParseHelper.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/PoolAlloc.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/RemoveTree.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/Scan.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/ShaderLang.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/SymbolTable.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/Versions.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/intermOut.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/limits.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/linkValidate.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/parseConst.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/reflection.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/preprocessor/Pp.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/preprocessor/PpAtom.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/preprocessor/PpContext.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/preprocessor/PpMemory.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/preprocessor/PpScanner.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/preprocessor/PpSymbols.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/preprocessor/PpTokens.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/MachineIndependent/propagateNoContraction.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/GenericCodeGen/CodeGen.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/GenericCodeGen/Link.cpp",

# OSDependent
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/glslang/OSDependent/Unix/ossource.cpp",

# OGLCompilersDLL
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/OGLCompilersDLL/InitializeDll.cpp",

# HLSL
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/hlsl/hlslParseHelper.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/hlsl/hlslScanContext.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/hlsl/hlslOpMap.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/hlsl/hlslTokenStream.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/hlsl/hlslGrammar.cpp",

# SPIRV
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/SPIRV/GlslangToSpv.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/SPIRV/InReadableOrder.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/SPIRV/Logger.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/SPIRV/SpvBuilder.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/SPIRV/SPVRemapper.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/SPIRV/doc.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/glslang/SPIRV/disassemble.cpp",

# common sources
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/layers/vk_layer_extension_utils.cpp",
    "../../../Common/Src/Vulkan/" + env.VulkanAPIVersion + "/SDK/Source/layers/vk_layer_table.cpp",
]

utils_Obj = lib_env.StaticLibrary('vkUtils', lib_src)

# Add the loader library path
env.Prepend (LIBPATH =
[
    '../../obj/' + env.platformPath + '/' + env.rootFolderName + '/Server/VulkanServer',
])

# These need to be in their dependency order, with most derived first
env['LIBS'] = \
[
    #local libraries
    "libCommon",
    "libAMDTOSWrappers",
    "libAMDTBaseTools",
    "libDDS",
    "libJpg",
    "libPng",
    "libZlib",               #used by PNG
    "libvkUtils",
    #boost
    File('../../../Common/Lib/Ext/Boost/boost_' + env.BoostVersion + '/lib/RHEL6/' + env.extConfig + '/libboost_system.a'),
    #external libraries
    "dl",
    "rt",
    "pthread",
]

sources = \
[
# VKT sources
    "OS/Linux/VulkanServer.cpp",

    "VKT/FrameDebugger/vktFrameDebuggerLayer.cpp",

    "VKT/Interception/vktIntercept.cpp",

    "VKT/Objects/Wrappers/vktWrappedCmdBuf.cpp",
    "VKT/Objects/Wrappers/vktWrappedObject.cpp",
    "VKT/Objects/Wrappers/vktWrappedQueue.cpp",
    "VKT/Objects/vktInstanceBase.cpp",
    "VKT/Objects/vktWrappedObjectDatabase.cpp",
    "VKT/Objects/vktObjectDatabaseProcessor.cpp",

    "VKT/Profiling/vktCmdBufProfiler.cpp",
    "VKT/Profiling/vktCmdBufProfilerStatic.cpp",
    "VKT/Profiling/vktFrameProfilerLayer.cpp",
    "VKT/Profiling/vktTimestampedCmdBuf.cpp",

    "VKT/Rendering/vktImageRenderer.cpp",

    "VKT/Tracing/vktAPIEntry.cpp",
    "VKT/Tracing/vktThreadTraceData.cpp",
    "VKT/Tracing/vktTraceAnalyzerLayer.cpp",

    "VKT/Util/vktUtil.cpp",

    "VKT/vktInterceptManager.cpp",
    "VKT/vktLayerManager.cpp",
    "VKT/vktPlugin.cpp",
]

# build the VulkanServer shared library
VulkanServer = env.SharedLibrary('VulkanServer', sources)

Depends(VulkanServer, utils_Obj)

Return('VulkanServer')

